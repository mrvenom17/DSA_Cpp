Array Data structure

An array is a linear data structure that stores a fixed-size sequence of elements of the same type.
Each element in the array is identified by its index or position.

Key points to remember:
- Array elements are stored in contiguous memory locations. This allows for efficient access to 
elements using their indices.
- Array indices start from 0. The first element is accessed using index 0, the second element with 
index 1, and so on.
- Arrays store elements of the same data type.(Homogenous elements)
- Arrays have a fixed size, meaning the number of elements they can hold is determined during their 
creation.

Types of indexing in an array: 
0 (zero-based indexing): The first element of the array starts from 0.
1 (one-based indexing): The first element of the array starts from 1.
n (N-based indexing): The base index of an array can be freely chosen.


Array initialization refers to the process of assigning initial values to the elements of an array. 
Ways to initialize an array:

1. Initializing with Values:
   - You can initialize an array by explicitly providing values for each element within curly braces 
     '{}' or square brackets '[]'.
   - For example, in Java, you can initialize an array of integers as follows: 
     int[] arr = {1, 2, 3, 4, 5};
   - The number of values provided should match the size of the array, and the elements are assigned 
     in the order of their appearance.

2. Initializing with a Default Value:
   - Some programming languages allow initializing an array with a default value for all elements.
   - For instance, in Python, you can initialize an array of a specified size with a default value 
     using the '*' operator and the 'list()' function.
   - Example: 'arr = [0] * 5' initializes an array with 5 elements, and each element is set to the 
     default value of 0.

3. Initializing with a Range or Sequence:
   - In certain programming languages, you can initialize an array with a range of values or a 
     sequence.
   - For instance, in Python, you can use the 'range()' function within the 'list()' function to 
     create an array with a sequence of numbers.
   - Example: 'arr = list(range(1, 6))' initializes an array with the sequence '[1, 2, 3, 4, 5]'.

4. Dynamic Initialization:
   - In some cases, you may initialize an array dynamically during runtime based on user input or 
     other factors.
   - This involves creating an array with a specified size and then assigning values to each element 
     using loops or other operations.


Operations:

- Accessing an element by index: array[index]
- Updating an element by index: array[index] = value
- Finding the length of the array: array.length or array.size()
- Traversing the array: iterating through each element using a loop
- Sorting the elements: using sorting algorithms like quicksort or mergesort

